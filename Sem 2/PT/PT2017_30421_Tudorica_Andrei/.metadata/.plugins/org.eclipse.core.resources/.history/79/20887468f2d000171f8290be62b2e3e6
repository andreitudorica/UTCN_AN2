import java.util.*;

public class SinglyListIterator<E> implements ListIterator<E> {
	private int index;
	private Node<E> currentNode, previousNode;

	public SinglyListIterator(int index, Node<E> head) {
		this.index = 1;
		this.currentNode = head;
		while (this.index != index && currentNode != null)
			this.next();
	}

	public Node<E> getCurrentNode() {
		return this.currentNode;
	}

	@Override
	public void add(E e) {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean hasNext() {
		if (this.currentNode.getRight() != null)
			return true;
		return false;
	}

	@Override
	public boolean hasPrevious() {
		return false;
	}

	@Override
	public E next() {
		this.previousNode = this.currentNode;
		this.currentNode = (Node<E>) this.currentNode.getRight();
		this.index++;
		return (E) this.currentNode;
	}

	@Override
	public int nextIndex() {
		return this.index + 1;
	}

	@Override
	public E previous() {
		this.currentNode = this.previousNode;
		this.index--;
		return (E) this.currentNode;
	}

	@Override
	public int previousIndex() {
		return this.index - 1;
	}

	@Override
	public void remove() {
		// TODO Auto-generated method stub

	}

	@Override
	public void set(E e) {
		// TODO Auto-generated method stub

	}

}
